#[cfg(test)]
use mockall::automock;

// Define a trait with a single method
#[cfg_attr(test, automock)]
pub trait DataFetcher {
    fn fetch(&self, key: &str) -> String;
}

// Real implementation of the DataFetcher trait
pub struct RealFetcher;

impl DataFetcher for RealFetcher {
    fn fetch(&self, key: &str) -> String {
        format!("Fetched real data for {}", key)
    }
}

// Function that depends on the DataFetcher trait
pub fn get_data(fetcher: &dyn DataFetcher, key: &str) -> String {
    fetcher.fetch(key)
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_get_data_with_mock() {
        // Use the mock generated by automock
        let mut mock_fetcher = MockDataFetcher::new();

        // Set up the mock to expect a call to `fetch` with "test_key"
        // and return "mocked_value"
        mock_fetcher
            .expect_fetch()
            .with(mockall::predicate::eq("test_key"))
            .returning(|_| "mocked_value".to_string());

        // Call the function under test with the mock object
        let result = get_data(&mock_fetcher, "test_key");

        // Assert that the function returns the mocked value
        assert_eq!(result, "mocked_value");
    }
}
